import string
import json
import os
import re

# lyric_graph.py
# created by Skylar Gilfeather on December 30th 2021
# modified by Skylar Gilfeather on January 6th 2022
#
# purpose: reads in lyric data generated by lyric_scrape.py and creates a 
# directed graph of word occurence pairings with weights representing their
# relative frequency in the lyric dataset. 
#   the digraph is represented as a python dictionary of dictionarys, which 
#   maps words to their directed neighbor, and maps each neighbor to a single
#   frequency for the given word pair. 

# print_graph()
# purpose:    iterates through every word pair in digraph, and prints the
#             directed pair and its frequency to outfile "song_edges.txt"
# parameters: dictionary (string to string) graph created by construct_graph()
# returns:    none; generates a text output file of results
# complexity: runs in O(edges) time, worst case O(n^2) for a dense graph

def print_graph(graph):
    with open("song_edges.txt", 'a') as outfile:
        outfile.write("digraph\n")
        for word1 in graph:
            for word2 in graph[word1]:
                edge_text = (str(word1) + " " + str(word2) + 
                " " + str(graph[word1][word2]) + "\n")
                outfile.write(edge_text)


# construct_graph()
# purpose:    iterates through every lyric file 
# parameters: dictionary (string to string) graph created by construct_graph()
# returns:    none; generates a text output file of results
# complexity: runs in O(n) time for n words in dataset

def construct_graph():
    graph = {}
    pair_count = 0
    # iterate through every lyric page generated in lyric_scrape.py
    for page in os.listdir("./test_files"):
        with open("./test_files/" + page, 'r') as openfile:
            for line in openfile:
                if line != "" and line != "\n":
                    words = line.split()
                    # for every unique directed pair of words in line
                    for i in range(0, len(words) - 1):
                        pair_count = pair_count + 1
                        # trim any whitespace and convert to lowercase
                        word1 = re.sub(r'\W+', '', words[i]).lower()
                        word2 = re.sub(r'\W+', '', words[i+1]).lower()

                        if word1 in graph:
                            if word2 in graph[word1]:
                                num_occur = graph[word1][word2]
                                graph[word1][word2] = num_occur + 1
                            else:    
                                graph[word1][word2] = 1
                        else:
                            graph[word1] = { word2 : 1 }
    return graph

